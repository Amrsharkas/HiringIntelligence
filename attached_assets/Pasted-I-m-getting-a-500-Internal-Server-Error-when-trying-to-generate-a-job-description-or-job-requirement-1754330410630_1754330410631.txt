I’m getting a 500 Internal Server Error when trying to generate a job description or job requirements using the “AI Generate” button on my platform. The error says:

pgsql
Copy
Edit
Failed to load resource: the server responded with a status of 500 (Internal Server Error)
Please do the following to fix the entire flow:

✅ 1. BACKEND — Fix or add the /api/generate-description and /api/generate-requirements routes
Ensure both routes are implemented correctly using express.json() and OpenAI's API:

ts
Copy
Edit
import express from 'express';
import fetch from 'node-fetch';

const app = express();
app.use(express.json());

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

app.post('/api/generate-description', async (req, res) => {
  const { title } = req.body;
  if (!title) return res.status(400).json({ error: 'Missing job title' });

  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: 'gpt-4',
        messages: [
          { role: 'system', content: 'You are an assistant that writes compelling job descriptions.' },
          { role: 'user', content: `Write a professional job description for a ${title}.` }
        ],
        temperature: 0.7
      })
    });

    const data = await response.json();
    const text = data.choices?.[0]?.message?.content;
    res.json({ description: text });
  } catch (err) {
    console.error('Error from OpenAI:', err);
    res.status(500).json({ error: 'Failed to generate job description.' });
  }
});

app.post('/api/generate-requirements', async (req, res) => {
  const { title } = req.body;
  if (!title) return res.status(400).json({ error: 'Missing job title' });

  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: 'gpt-4',
        messages: [
          { role: 'system', content: 'You are an assistant that writes job requirements for roles.' },
          { role: 'user', content: `List the requirements and qualifications for a ${title} role.` }
        ],
        temperature: 0.6
      })
    });

    const data = await response.json();
    const text = data.choices?.[0]?.message?.content;
    res.json({ requirements: text });
  } catch (err) {
    console.error('Error from OpenAI:', err);
    res.status(500).json({ error: 'Failed to generate job requirements.' });
  }
});
✅ 2. BACKEND — Add proper environment variable
Make sure OPENAI_API_KEY is set correctly in .env:

ini
Copy
Edit
OPENAI_API_KEY=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
✅ 3. FRONTEND — Update fetch call to send proper data
Update the function that calls the backend to:

ts
Copy
Edit
const generateDescription = async (title) => {
  try {
    const res = await fetch('/api/generate-description', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ title })
    });
    const data = await res.json();
    return data.description;
  } catch (err) {
    console.error('Frontend fetch error:', err);
    return null;
  }
};

const generateRequirements = async (title) => {
  try {
    const res = await fetch('/api/generate-requirements', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ title })
    });
    const data = await res.json();
    return data.requirements;
  } catch (err) {
    console.error('Frontend fetch error:', err);
    return null;
  }
};
✅ 4. Logging & Debugging
In both backend routes, add console.log(req.body) to verify the job title is being received properly, and inspect data from OpenAI before using data.choices[0].

✅ 5. Test end-to-end
After implementing, restart the backend, open the browser dev tools, and try generating again. Confirm:

No 500 errors in the console

req.body.title is correct

You get valid content from data.choices[0].message.content